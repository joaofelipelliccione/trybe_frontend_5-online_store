{"version":3,"sources":["services/api.js","components/Card.jsx","components/Categories.jsx","components/Header.jsx","components/Footer.jsx","images/waitingForSearch.svg","images/noResults.svg","pages/Home.jsx","components/CartCard.jsx","images/emptyCart.svg","pages/Cart.jsx","components/Review.jsx","pages/ProductDetails.jsx","App.js","index.js"],"names":["getCategories","a","fetch","response","json","data","getProductsFromCategoryAndQuery","categoryId","query","END_POINT_ITEM","Card","this","props","productId","title","thumbnail","price","availableQuantity","address","productIndex","addToCart","className","to","pathname","state","src","alt","toFixed","city_name","state_name","id","type","onClick","React","Component","Categories","getCategoriesName","setState","categoriesList","categoryChecked","map","microObj","htmlFor","name","onChange","Header","numOfCartItems","cartItems","numberOfCartItems","length","quantity","reduce","result","value","cartTotalValue","cartTotalValueResult","totalValue","loading","Footer","href","rel","target","Home","settingLocalStorage","userCart","JSON","parse","localStorage","getItem","setItem","stringify","getLocStUserCart","cartItemsFromLocSt","Array","isArray","handleClick","userSearchedItem","didSearch","results","searchWithEnter","e","preventDefault","onInputChange","formElementValue","checked","setLocStOnAddToCart","updatedCartItems","totalQuant","objProduct","available_quantity","some","item","prevState","cleanSearch","searchResults","role","placeholder","onKeyPress","event","key","disabled","index","waitingForSearch","noResults","CartCard","initialProductQuant","quantOnMount","find","productQuant","itemsOnCartCalculator","total","purchaseTVCalculator","addItem","userCartFromLocSt","forEach","window","alert","newQuantity","location","reload","subItem","productPrice","deleteCartItem","width","Cart","insertItensInTheCart","updateLocStUserCart","findIndex","product","filter","_product","emptyCart","cartItem","Review","handleSubmit","handleChange","sendReview","comment","reviewStar","objComment","reviews","onSubmit","required","rows","review","ProductDetails","App","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba7c8328.chunk.js","sourcesContent":["export async function getCategories() { // Pega a lista de categorias oferecidas pelo MELI.\n  const END_POINT_CATEGORIES = 'https://api.mercadolibre.com/sites/MLB/categories';\n  const response = await fetch(END_POINT_CATEGORIES);\n  const data = await response.json();\n\n  return data;\n}\n\nexport async function getProductsFromCategoryAndQuery(categoryId, query) { // Realiza a busca por produtos, cruzando categoria e termo pesquisado.\n  const END_POINT_ITEM = `https://api.mercadolibre.com/sites/MLB/search?category=${categoryId}&q=${query}`;\n  const response = await fetch(END_POINT_ITEM);\n  const data = await response.json();\n\n  return data;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport '../styles/Card.css';\n\nclass Card extends React.Component {\n  render() {\n    const { productId, title, thumbnail, price, availableQuantity, address, productIndex, addToCart } = this.props;\n\n    return (\n      <div className=\"cardContainer2\">\n        <Link // Todo o card é englobado por um componente <Link>. Tal componente permite que, quando o Card seja clicado, a página ProductDetails seja aberta.\n          to={ {\n            pathname: `/trybe_frontend_5-online_store/products/${productId}`, // É importante pontuar que, cada Card, possui sua própria página ProductDetails, cuja URL será /products/Id-do-item-clicado.\n            state: { // A página ProductDetails, que é um componente, recebe informações (title, thumbnail, price...) referentes ao produto. Essas informações são passadas via <Link /> e encontradas em \"const { location: { state: { title, thumbnail, price, idItem } } } = this.props\".\n              productId,\n              title,\n              thumbnail,\n              price,\n              availableQuantity,\n              address,\n              productIndex,\n            },\n          } }\n          data-testid=\"product-detail-link\"\n        >\n          <div className=\"eachCard\">\n            <h3>{ title }</h3>\n            <img src={ thumbnail } alt={ title } />\n            <p>{ `R$ ${price.toFixed(2)}` }</p>\n            <p>{ `${address.city_name}, ${address.state_name}` }</p>\n          </div>\n        </Link>\n        <button\n          id={ productIndex }\n          className=\"addToCartBtn\"\n          data-testid=\"product-add-to-cart\"\n          type=\"button\"\n          onClick={ addToCart }\n        >\n          Adicionar ao Carrinho\n        </button>\n      </div>\n    );\n  }\n}\n\nCard.propTypes = {\n  productId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  thumbnail: PropTypes.string.isRequired,\n  price: PropTypes.number.isRequired,\n  availableQuantity: PropTypes.number.isRequired,\n  productIndex: PropTypes.number.isRequired,\n  addToCart: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getCategories } from '../services/api';\nimport '../styles/Categories.css';\n\nclass Categories extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      categoriesList: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getCategoriesName();\n  }\n\n  getCategoriesName = async () => { // Função que realiza a requisição para a getCategories(), para captar todas as categorias atualmente oferecidas pelo MELI. Será chamada na montagem da página.\n    const data = await getCategories();\n\n    this.setState({ categoriesList: data });\n  }\n\n  render() {\n    const { categoriesList } = this.state;\n    const { categoryChecked } = this.props;\n\n    return (\n      <div id=\"categoriesContainer2\">\n        <h3>Categorias</h3>\n        {categoriesList.map((microObj) => (\n          <div id=\"eachCategory\" key={ microObj.id }>\n            <label data-testid=\"category\" htmlFor={ microObj.id }>\n              { microObj.name }\n              <input\n                id={ microObj.id }\n                name=\"category\"\n                type=\"radio\"\n                onChange={ categoryChecked }\n              />\n            </label>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nCategories.propTypes = {\n  categoryChecked: PropTypes.func.isRequired,\n};\n\nexport default Categories;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Header.css';\n\nclass Header extends React.Component {\n  numOfCartItems = () => { // Função que capta o número de itens adicionados ao carrinho.\n    const { cartItems } = this.props; // OBS: A props cartItems vêm da página Home, da página Cart ou da página ProductDetails.\n    let numberOfCartItems = 0;\n\n    if (cartItems.length > 0) {\n      const quantitiesArray = cartItems.map((microObj) => microObj.quantity);\n      const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n      numberOfCartItems = totalQuant;\n    }\n\n    return numberOfCartItems;\n  }\n\n  cartTotalValue = () => { // Função que calcula o valor total do carrinho.\n    const { cartItems } = this.props; // OBS: A props cartItems vêm da página Home ou da página Cart.\n    let cartTotalValueResult = 0;\n\n    if (cartItems.length > 0) {\n      const totalValuesArray = cartItems.map((microObj) => microObj.totalValue);\n      const totalValue = totalValuesArray.reduce((result, value) => result + value);\n      cartTotalValueResult = totalValue;\n    }\n\n    return cartTotalValueResult.toFixed(2);\n  }\n\n  render() {\n    const { loading } = this.props;\n\n    return (\n      <header data-testid=\"header-component\">\n        <div id=\"logoAndUserBar\">\n          <h1>e-shop</h1>\n        </div>\n        <div id=\"linksBar\">\n          <Link to=\"/trybe_frontend_5-online_store/\">Pesquisa</Link>\n          <Link to=\"/trybe_frontend_5-online_store/cart\" data-testid=\"shopping-cart-button\">{`Carrinho - ${this.numOfCartItems()} produto(s) - R$ ${this.cartTotalValue()}`}</Link>\n        </div>\n        { loading &&\n          <div id=\"loadingContainer\">\n            <span>Carregando...</span>\n          </div>\n        }\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport '../styles/Footer.css';\n\nclass Footer extends React.Component {\n  render() {\n    return(\n      <footer>\n        <span>\n          Developed by <a href=\"https://github.com/joaofelipelliccione\" rel=\"noopener noreferrer\" target=\"_blank\">João Felipe Pelliccione</a>\n        </span>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/waitingForSearch.b83b7e51.svg\";","export default __webpack_public_path__ + \"static/media/noResults.a297f88a.svg\";","import React from 'react';\nimport { getProductsFromCategoryAndQuery } from '../services/api';\nimport Card from '../components/Card';\nimport Categories from '../components/Categories';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport waitingForSearch from '../images/waitingForSearch.svg';\nimport noResults from '../images/noResults.svg';\nimport '../styles/Home.css';\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n    const searchResults = JSON.parse(localStorage.getItem(\"searchResults\"));\n    this.settingLocalStorage();\n\n    if (searchResults !== null) { // Configurando o estado quando o usuário já realizou, anteriormente, buscas no website.\n      this.state = {\n        loading: false,\n        userSearchedItem: '',\n        categoryId: '',\n        results: searchResults,\n        didSearch: true,\n        cartItems: [],\n      };\n    }\n\n    if (searchResults === null || searchResults.length === 0 ) { // Configurando o estado quando o usuário acessa o website pela primeira vez.\n      this.state = {\n        loading: false,\n        userSearchedItem: '',\n        categoryId: '',\n        results: [],\n        didSearch: false,\n        cartItems: [],\n      };\n    }\n  }\n\n  settingLocalStorage = () => { // Função que define o local storage do usuário, em seu primeiro acesso ao website. É chamada no Constructor(), logo, é como se estivesse sendo chamada no antigo componentWillMount().\n    const userCart = JSON.parse(localStorage.getItem(\"userCart\"));\n\n    if (userCart === null || userCart.length === 0) {\n      localStorage.setItem('userCart', JSON.stringify([]));\n      localStorage.setItem('totalItemsOnCart', JSON.stringify(0));\n      localStorage.setItem('purchaseTotalValue', JSON.stringify(0));\n    }\n  }\n\n  componentDidMount() {\n    this.getLocStUserCart();\n  }\n\n  getLocStUserCart = () => { // Função que capta os itens do carrinho salvos no local storage, sempre que a página Home for montada. Tal função evita que o carrinho do usuário seja restaurado sempre que ele vá para a página Cart ou para a ProductDetails.\n    const cartItemsFromLocSt = JSON.parse(localStorage.getItem('userCart'));\n\n    if (Array.isArray(cartItemsFromLocSt)) { // Caso a key \"userCart\", de local storage, NÃO seja um array vazio...\n      this.setState({ cartItems: cartItemsFromLocSt }); // ...o estado é definido.\n    }\n  }\n\n  handleClick = async () => { // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada no termo pesquisado. Será chamada no onClick do botão de pesquisar.\n    this.setState({ loading: true });\n    const { categoryId, userSearchedItem } = this.state;\n\n    const response = await getProductsFromCategoryAndQuery(categoryId, userSearchedItem);\n\n    this.setState({\n      didSearch: true,\n      results: response.results,\n      loading: false,\n    }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results))); // Salvando os resultados de pesquisa no estado \"results.\"\n  }\n\n  searchWithEnter = (e) => { // Permite fazer uma busca pressionando a tecla Enter.\n    e.preventDefault();\n    this.handleClick();\n  }\n\n  onInputChange = ({ target }) => { // Função que altera o estado 'userSearchedItem', no momento que o usuário realiza uma busca. Será chamada no onChange de #searchBar.\n    const { name } = target;\n    const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({ [name]: formElementValue });\n  }\n\n  categoryChecked = async ({ target }) => { // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada na categoria clicada. Será chamada no onChange de cada radio, de cada categoria.\n    const { userSearchedItem } = this.state;\n    this.setState({ loading: true, categoryId: target.id });\n\n    const response = await getProductsFromCategoryAndQuery(target.id, userSearchedItem);\n    this.setState(\n      { results: response.results,\n        didSearch: true,\n        loading: false,\n      }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results))); // Salvando os resultados de pesquisa no estado \"results.\"\n  }\n\n  setLocStOnAddToCart = (updatedCartItems) => { // Função que aloca, no local storage, importantes informações, sempre que um novo item for adicionado ao carrinho. É chamada dentro da addToCart() abaixo, após a atualização do estado cuja key é \"cartItems\".\n\n    // Atualização do carrinho, que passa a ter um novo item:\n    localStorage.setItem('userCart', JSON.stringify(updatedCartItems));\n\n    // Atualização da quantidade de itens no carrinho:\n    const quantitiesArray = updatedCartItems.map((microObj) => microObj.quantity);\n    const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(totalQuant));\n\n    // Atualização do atual valor total (R$) do carrinho:\n    const totalValuesArray = updatedCartItems.map((microObj) => microObj.totalValue);\n    const totalValue = totalValuesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(totalValue));\n\n  }\n\n  addToCart = ({ target }) => { // Função que permite a adição de um determinado produto ao carrinho de compras. Será passada para o componente Card, via props, e chamada no OnClick do botão \"Adicionar ao Carrinho\". || OBS: O Id do botão \"Adicionar ao Carrinho\", de cada Card, é igual ao índice do produto no array results.\n    const { id } = target;\n    const { results, cartItems } = this.state;\n    const objProduct = {\n      productId: results[id].id,\n      title: results[id].title,\n      thumbnail: results[id].thumbnail,\n      price: results[id].price,\n      availableQuantity: results[id].available_quantity, // Quantidade disponível daquele produto.\n      address: results[id].address,\n      quantity: 1, // Quantidade adquirida pelo usuário\n      totalValue: results[id].price,\n    };\n\n    if (!cartItems.some((item) => item.title === objProduct.title)) { // Condicional que evita a adição de 2 produtos iguais ao carrinho.\n      this.setState((prevState) => ({\n        cartItems: [...prevState.cartItems, objProduct],\n      }), () => this.setLocStOnAddToCart(this.state.cartItems)); // Após atualização do estado de key igual à cartItems, atualiza-se o local storage.\n    }\n  }\n\n  cleanSearch = () => { // Função que limpa a pesquisa realizada pelo usuário. Será chamada no onClick do botão 'Limpar'.\n    this.setState({\n      userSearchedItem: '',\n      categoryId: '',\n      results: [],\n      didSearch: false,\n    }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results))); // Limpando os resultados de pesquisa no estado \"results.\"\n  }\n\n  render() {\n    const { loading, userSearchedItem, results, didSearch, cartItems } = this.state;\n\n    return (\n      <div id=\"homepage\">\n        <Header loading={ loading } cartItems={ cartItems } />\n\n        <section id=\"homepageMain\">\n          <div id=\"searchContainer\">\n            <button\n              id=\"clearBtn\"\n              type=\"button\"\n              onClick={ this.cleanSearch }\n            >\n              <span role=\"img\" aria-label=\"emoji-lupa\">Limpar</span>\n            </button>\n            <label htmlFor=\"search\">\n              <input\n                id=\"searchBar\"\n                data-testid=\"query-input\"\n                name=\"userSearchedItem\"\n                value={ userSearchedItem }\n                placeholder=\"Busque por um produto...\"\n                onChange={ this.onInputChange }\n                onKeyPress={ (event) => event.key === 'Enter' && this.searchWithEnter(event) }\n              />\n            </label>\n            <button\n              id=\"searchBtn\"\n              type=\"button\"\n              disabled={ (userSearchedItem === '') }\n              onClick={ this.handleClick }\n              data-testid=\"query-button\"\n            >\n              <span role=\"img\" aria-label=\"emoji-lupa\">🔎</span>\n            </button>\n          </div>\n          <section id=\"homepageCenter\">\n            <aside id=\"categoriesContainer1\">\n              <Categories categoryChecked={ this.categoryChecked } />\n            </aside>\n            <div id=\"productsDisplay\">\n              { !didSearch\n                ? (\n                  <div id=\"initialMessage\">\n                    <h2 data-testid=\"home-initial-message\">\n                      Busque um produto ou escolha uma categoria!\n                    </h2>\n                    <img src={ waitingForSearch } alt=\"Waiting For Search\"/>\n                  </div>)\n                : results.map((item, index) => (\n                  <div className=\"cardContainer1\" key={ item.id } data-testid=\"product\">\n                    <Card\n                      productId={ item.id }\n                      title={ item.title }\n                      thumbnail={ item.thumbnail }\n                      price={ item.price }\n                      availableQuantity={ item.available_quantity }\n                      address={ item.address }\n                      productIndex={ index }\n                      addToCart={ this.addToCart }\n                    />\n                  </div>\n                ))}\n                {(didSearch && results.length === 0)\n                  && <div id=\"nothingFound\">\n                      <h2>Nenhum produto encontrado</h2>\n                      <img src={ noResults } alt=\"No Products Found\"/>\n                    </div>}\n            </div>\n          </section>\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/CartCard.css';\n\nclass CartCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      productQuant: 1,\n    };\n  }\n\n  componentDidMount() {\n    this.initialProductQuant();\n  }\n\n  initialProductQuant = () => { // Função que pega, do local storage, a quantidade de unidades do produto. É acionada na montagem do componente.\n    const { productId } = this.props;\n    const userCartFromLocSt = JSON.parse(localStorage.getItem(\"userCart\"));\n    const quantOnMount = userCartFromLocSt.find((microObj) => microObj.productId === productId).quantity;\n\n    this.setState({ productQuant: quantOnMount });\n  }\n\n  itemsOnCartCalculator = () => { // Função que realiza o cálculo de quantos produtos há no carrinho e, feito isso, atualiza a chave \"totalItemsOnCart\" do local storage. É chamada nas funções addItem() e subItem() abaixo.\n    const userCartFromLocSt = JSON.parse(localStorage.getItem(\"userCart\"));\n\n    const quantitiesArray = userCartFromLocSt.map((microObj) => microObj.quantity);\n\n    const total = quantitiesArray.reduce((result, value) => result + value);\n\n    localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(total));\n  }\n\n  purchaseTVCalculator = () => { // Função que realiza o cálculo do valor total (R$) do carrinho e, feito isso, atualiza a chave \"purchaseTotalValue\" do local storage. É chamada nas funções addItem() e subItem() abaixo.\n    const userCartFromLocSt = JSON.parse(localStorage.getItem(\"userCart\"));\n\n    const totalValuesArray = userCartFromLocSt.map((microObj) => microObj.totalValue);\n\n    const total = totalValuesArray.reduce((result, value) => result + value);\n\n    localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(total));\n  }\n\n  addItem = ({ target }) => { // Função que atualiza, no local storage, as chaves \"userCart\", \"totalItemsOnCart\" e \"purchaseTotalValue\" quando o usuário aumenta o número de unidades que deseja comprar, do produto. A chave \"productQuant\", do estado, também é atualizada com a nova quantidade.\n    const userCartFromLocSt = JSON.parse(localStorage.getItem(\"userCart\"));\n\n    userCartFromLocSt.forEach((microObj) => {\n      if (microObj.productId === target.id) {\n        if (microObj.quantity < microObj.availableQuantity) { // Condicional que limita o número de unidades dependendo de quantas estão disponíveis em estoque.\n          microObj.quantity += 1;\n          microObj.totalValue = microObj.price * microObj.quantity;\n        } else {\n          window.alert(`Sentimos muito, só temos ${microObj.availableQuantity} unidades disponíveis em estoque.`)\n        }\n      }\n    });\n\n    const newQuantity = userCartFromLocSt.find(({ productId }) => productId === target.id).quantity;\n\n    this.setState({ productQuant: newQuantity });\n    localStorage.setItem(\"userCart\", JSON.stringify(userCartFromLocSt));\n    this.itemsOnCartCalculator()\n    this.purchaseTVCalculator();\n    window.location.reload(); // Necessário para que o cabeçalho mostre a quantidade e o valor total da compra, a cada nova adição.\n  }\n\n  subItem = ({ target }) => { // Função que atualiza, no local storage, as chaves \"userCart\", \"totalItemsOnCart\" e \"purchaseTotalValue\" quando o usuário reduz o número de unidades que deseja comprar, do produto. A chave \"productQuant\", do estado, também é atualizada com a nova quantidade.\n    const userCartFromLocSt = JSON.parse(localStorage.getItem(\"userCart\"));\n\n    userCartFromLocSt.forEach((microObj) => {\n      if (microObj.productId === target.id) {\n        microObj.quantity -= 1\n        microObj.totalValue = microObj.price * microObj.quantity;\n      }\n    });\n\n    const newQuantity = userCartFromLocSt.find((microObj) => microObj.productId === target.id).quantity;\n\n    if (newQuantity > 0) { // A respectiva condicional evita que o <output> contido entre \"-\" e \"+\" mostre um número menor que 1.\n      this.setState({ productQuant: newQuantity });\n      localStorage.setItem(\"userCart\", JSON.stringify(userCartFromLocSt));\n      this.itemsOnCartCalculator();\n      this.purchaseTVCalculator();\n      window.location.reload(); // Necessário para que o cabeçalho mostre a quantidade e o valor total da compra, a cada nova subtração..\n    }\n  }\n\n  render() {\n    const { thumbnail, title, productPrice, productId, deleteCartItem } = this.props;\n    const { productQuant } = this.state;\n\n    return (\n      <div className=\"eachCartCard\" data-testid=\"shopping-cart-product-name\">\n        <h3>{ title }</h3>\n        <img src={ thumbnail } alt={ title } width=\"170px\" />\n        <p>{ `R$ ${ productPrice.toFixed(2) }` }</p>\n        <div id=\"cartCardBtnsContainer\">\n          <button\n            className=\"deleteBtn\"\n            id={ productId }\n            type=\"button\"\n            onClick={ deleteCartItem }\n          >\n            X\n          </button>\n          <button\n            className=\"quantityBtn\"\n            id={ productId }\n            type=\"button\"\n            onClick={ this.subItem }\n            data-testid=\"product-decrease-quantity\"\n          >\n            -\n          </button>\n          <output\n            data-testid=\"shopping-cart-product-quantity\"\n          >\n            {productQuant}\n          </output>\n          <button\n            className=\"quantityBtn\"\n            id={ productId }\n            type=\"button\"\n            onClick={ this.addItem }\n            data-testid=\"product-increase-quantity\"\n          >\n            +\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nCartCard.propTypes = {\n  thumbnail: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  productId: PropTypes.string.isRequired,\n  deleteCartItem: PropTypes.func.isRequired,\n};\n\nexport default CartCard;\n","export default __webpack_public_path__ + \"static/media/emptyCart.a0cbbf8b.svg\";","import React from 'react';\nimport CartCard from '../components/CartCard';\nimport Header from '../components/Header';\nimport emptyCart from '../images/emptyCart.svg';\nimport '../styles/Cart.css';\n\nclass Cart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cartItems: [],\n    };\n  }\n\n  componentDidMount() {\n    this.insertItensInTheCart();\n  }\n\n  componentDidUpdate() {\n    this.updateLocStUserCart();\n  }\n\n  insertItensInTheCart = () => { // Função que capta os itens do carrinho salvos no local storage, sempre que a página Cart for montada.\n    const cartItems = JSON.parse(localStorage.getItem('userCart'));\n    this.setState({ cartItems });\n  }\n\n  updateLocStUserCart = () => { // Função que atualiza as keys \"userCart\", \"totalItemsOnCart\" e \"purchaseTotalValue\", contidas no local storage, sempre que algum estado da página Cart for atualizado (ou seja, quando há adição, subtração ou deleção de produto).\n    const { cartItems } = this.state;\n\n    if (cartItems.length === 0) {\n      localStorage.setItem('userCart', JSON.stringify([]));\n      localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(0));\n      localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(0));\n    }\n\n    if (cartItems.length !== 0) {\n      // Atualização do carrinho:\n      localStorage.setItem('userCart', JSON.stringify(cartItems));\n\n      // Atualização da quantidade de itens no carrinho:\n      const quantitiesArray = cartItems.map((microObj) => microObj.quantity);\n      const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n      localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(totalQuant));\n\n      // Atualização do atual valor total (R$) do carrinho:\n      const totalValuesArray = cartItems.map((microObj) => microObj.totalValue);\n      const totalValue = totalValuesArray.reduce((result, value) => result + value);\n      localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(totalValue));\n    }\n  }\n\n  deleteCartItem = ({ target }) => { // Função que deleta produtos do carrinho.\n    const { cartItems } = this.state;\n    const productIndex = cartItems.findIndex((product) => product.productId === target.id); // REF: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n    // OBS: Todos os botões de deletar, possuem Id igual à ID do produto. Isso possibilita o funcionamento do target acima.\n\n    this.setState({\n      cartItems: cartItems.filter((_product, index) => index !== productIndex), // Retorna todos os produtos contidos no estado 'cartItems', menos o produto excluído.\n    });\n  }\n\n  render() {\n    const { cartItems } = this.state;\n\n    return (\n      <div id=\"cartPage\">\n        <Header cartItems={ cartItems } />\n\n        <main id=\"cartProductsDisplay\">\n          {cartItems.length === 0\n            ? <div id=\"emptyShopCart\">\n                <h2 data-testid=\"shopping-cart-empty-message\">\n                  Seu carrinho está vazio\n                </h2>\n                <img src={ emptyCart } alt=\"Empty Cart\"/>\n              </div>\n            : cartItems.map((cartItem) => (\n              <div className=\"eachCartCardContainer\" key={ cartItem.title }>\n                <CartCard\n                  title={ cartItem.title }\n                  thumbnail={ cartItem.thumbnail }\n                  productPrice={ cartItem.price }\n                  productId={ cartItem.productId }\n                  deleteCartItem={ this.deleteCartItem }\n                />\n              </div>\n            ))}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Cart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/Review.css';\n\nclass Review extends React.Component {\n  constructor(props) {\n    super(props);\n    const { productId } = this.props;\n    const reviews = JSON.parse(localStorage.getItem(productId));\n\n    if (reviews !== null) { // Definição do estado caso o usuário já tenha realizado um review, para o respectivo produto, anteriormente.\n      this.state = {\n        name: '',\n        comment: '',\n        reviewStar: '',\n        reviews,\n      };\n    }\n\n    if (reviews === null) { // Definição do estado caso o usuário nunca tenha realizado um review para o respectivo produto, anteriormente.\n      this.state = {\n        name: '',\n        comment: '',\n        reviewStar: '',\n        reviews: [],\n      };\n    }\n  }\n\n  handleSubmit = (event) => { // Função que evita que o forms seja POST, quando o usuário apertar o botão 'Avaliar'. É chamada dentro do onSubmit, do #reviewForm.\n    event.preventDefault();\n  }\n\n  handleChange = ({ target }) => { // Função que altera o estado 'name', 'comment' e/ou 'reviewStar' no momento que o usuário realiza alguma modificação. Será chamada nos onChanges de #reviewForm.\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  sendReview = () => { // Função que altera o estado cuja key é igual à 'reviews' e salva, no local storage, a avaliação do usuário.\n    const { comment, reviewStar, name } = this.state;\n    const { productId } = this.props;\n    const objComment = {\n      comment,\n      reviewStar,\n      name,\n    };\n\n    this.setState((prevState) => ({\n      reviews: [...prevState.reviews, objComment],\n      comment: '',\n      name: '',\n    }), () => localStorage.setItem(productId, JSON.stringify(this.state.reviews))); // Após a atualização do estado 'reviews', a avaliação do usuário é salva no local storage.\n  }\n\n  render() {\n    const { name, comment, reviews } = this.state;\n\n    return (\n      <div id=\"reviewFormContainer\">\n        <form id=\"reviewForm\" onSubmit={ this.handleSubmit }>\n          <label id=\"nameLabel\" htmlFor=\"name\">\n            <input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Nome\"\n              value={ name }\n              onChange={ this.handleChange }\n              required\n            />\n          </label>\n          <div id=\"reviewStarContainer\">\n            <label htmlFor=\"1\">\n              <span role=\"img\" aria-label=\"starEmoji\">1🌟</span>\n              <input\n                id=\"1\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"1\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n            <label htmlFor=\"2\">\n            <span role=\"img\" aria-label=\"starEmoji\">2🌟</span>\n              <input\n                id=\"2\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"2\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n            <label htmlFor=\"3\">\n            <span role=\"img\" aria-label=\"starEmoji\">3🌟</span>\n              <input\n                id=\"3\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"3\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n            <label htmlFor=\"4\">\n            <span role=\"img\" aria-label=\"starEmoji\">4🌟</span>\n              <input\n                id=\"4\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"4\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n            <label htmlFor=\"5\">\n            <span role=\"img\" aria-label=\"starEmoji\">5🌟</span>\n              <input\n                id=\"5\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"5\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n          </div>\n\n          <textarea\n            data-testid=\"product-detail-evaluation\"\n            rows=\"5\"\n            placeholder=\"Mensagem de Avaliação (opcional)\"\n            onChange={ this.handleChange }\n            name=\"comment\"\n            value={ comment }\n          />\n          <br />\n\n          <button type=\"submit\" onClick={ this.sendReview }>Avaliar</button>\n        </form>\n        {reviews.length > 0\n        && reviews.map((review) => (\n          <div id=\"commentContainer\" key={ review.comment }>\n            <h2>{ review.name }</h2>\n            <h3>{ `${review.reviewStar} 🌟` }</h3>\n            <p>{ review.comment }</p>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nReview.propTypes = {\n  productId: PropTypes.string.isRequired,\n};\n\nexport default Review;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Review from '../components/Review';\nimport Header from '../components/Header';\nimport '../styles/ProductDetails.css';\n\nclass ProductDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    const cartItems = JSON.parse(localStorage.getItem('userCart'));\n    const searchResults = JSON.parse(localStorage.getItem(\"searchResults\"));\n\n    this.state = {\n      results: searchResults,\n      cartItems,\n    };\n  }\n\n  setLocStOnAddToCart = (updatedCartItems) => { // Função que aloca, no local storage, importantes informações, sempre que um novo item for adicionado ao carrinho. É chamada dentro da addToCart() abaixo, após a atualização do estado cuja key é \"cartItems\".\n\n    // Atualização do carrinho, que passa a ter um novo item:\n    localStorage.setItem('userCart', JSON.stringify(updatedCartItems));\n\n    // Atualização da quantidade de itens no carrinho:\n    const quantitiesArray = updatedCartItems.map((microObj) => microObj.quantity);\n    const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(totalQuant));\n\n    // Atualização do atual valor total (R$) do carrinho:\n    const totalValuesArray = updatedCartItems.map((microObj) => microObj.totalValue);\n    const totalValue = totalValuesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(totalValue));\n\n  }\n\n  addToCart = ({ target }) => { // Função que permite a adição de um determinado produto ao carrinho de compras. Será chamada no OnClick do botão \"Adicionar ao Carrinho\". || OBS: O Id do botão \"Adicionar ao Carrinho\" é igual ao índice do produto no array results.\n    const { id } = target;\n    const { results, cartItems } = this.state;\n    const objProduct = {\n      productId: results[id].id,\n      title: results[id].title,\n      thumbnail: results[id].thumbnail,\n      price: results[id].price,\n      availableQuantity: results[id].available_quantity, // Quantidade disponível daquele produto.\n      address: results[id].address,\n      quantity: 1, // Quantidade adquirida pelo usuário\n      totalValue: results[id].price,\n    };\n\n    if (!cartItems.some((item) => item.title === objProduct.title)) { // Condicional que evita a adição de 2 produtos iguais ao carrinho.\n      this.setState((prevState) => ({\n        cartItems: [...prevState.cartItems, objProduct],\n      }), () => this.setLocStOnAddToCart(this.state.cartItems)); // Após atualização do estado de key igual à cartItems, atualiza-se o local storage.\n    }\n  }\n\n  render() {\n    const { location: { state: { productId, title, thumbnail, price, address, productIndex } } } = this.props;\n    const { cartItems } = this.state;\n\n    return (\n      <div id=\"productDetailsPage\">\n        <Header cartItems={ cartItems } />\n        <main id=\"productDetailsMain\">\n          <div className=\"eachProductDetailCard\">\n            <h3 data-testid=\"product-detail-name\">{ title }</h3>\n            <img src={ thumbnail } alt={ title } />\n            <p>{ `R$ ${price.toFixed(2)}` }</p>\n            <p>{ `${address.city_name}, ${address.state_name}` }</p>\n            <button\n              className=\"addToCartBtn\"\n              data-testid=\"product-detail-add-to-cart\"\n              type=\"button\"\n              id={ productIndex }\n              onClick={ this.addToCart }\n            >\n              Adicionar ao Carrinho\n            </button>\n          </div>\n          <Review productId={ productId } />\n        </main>\n      </div>\n\n    );\n  }\n}\n\nProductDetails.propTypes = {\n  location: PropTypes.shape({\n    state: PropTypes.shape({\n      productId: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      thumbnail: PropTypes.string.isRequired,\n      price: PropTypes.number.isRequired,\n      productIndex: PropTypes.number.isRequired,\n      address: PropTypes.shape({\n        city_id: PropTypes.string.isRequired,\n        city_name: PropTypes.string.isRequired,\n        state_id: PropTypes.string.isRequired,\n        state_name: PropTypes.string.isRequired,\n      }),\n    })\n  }),\n};\n\nexport default ProductDetails;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Cart from './pages/Cart';\nimport ProductDetails from './pages/ProductDetails';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/trybe_frontend_5-online_store/\" render={ () => <Home /> } />\n          <Route exact path=\"/trybe_frontend_5-online_store/cart\" render={ () => <Cart /> } />\n          <Route\n            exact\n            path=\"/products/:id\"\n            render={ (props) => <ProductDetails { ...props } /> }\n          />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}